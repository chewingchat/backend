# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 전체 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Show current directory
        run: pwd

      - name: List all files in directory
        run: ls -R

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Build with Gradle
        if: github.ref == 'refs/heads/dev'  # dev 브랜치에서만 빌드
        env:
          SPRING_PROFILES_ACTIVE: live
        run: ./gradlew clean build

      - name: Build Docker Image
        if: github.ref == 'refs/heads/dev'  # dev 브랜치에서만 Docker 이미지 빌드
        env:
          SPRING_PROFILES_ACTIVE: live
        run: docker build -t yhkim052556/chewingrepository:latest .

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/dev'  # dev 브랜치에서만 Docker Hub 로그인
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          SPRING_PROFILES_ACTIVE: live
        run: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

      - name: Push Docker Image to Docker Hub
        if: github.ref == 'refs/heads/dev'  # dev 브랜치에서만 Docker 이미지 푸시
        env:
          SPRING_PROFILES_ACTIVE: live
        run: docker push yhkim052556/chewingrepository:latest
        
        
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy docker-compose.yml to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.NCP_SERVER_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        key: ${{ secrets.NCP_SSH_KEY }}
        port: 8080
        source: "C:/Users/yhkim/Documents/backend/docker-compose.yml"
        target: "/home/username/backend/"

    - name: Deploy with SSH
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.NCP_SERVER_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        key: ${{ secrets.NCP_SSH_KEY }}
        port: 8080
        script: |
          export BUCKET_URL=${{ secrets.BUCKET_URL }}
          export DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export FCM_API_URL=${{ secrets.FCM_API_URL }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export MEDIA_URL=${{ secrets.MEDIA_URL }}
          export NCP_ACCESS_KEY=${{ secrets.NCP_ACCESS_KEY }}
          export NCP_BUCKET_NAME=${{ secrets.NCP_BUCKET_NAME }}
          export NCP_SECRET_KEY=${{ secrets.NCP_SECRET_KEY }}
          export NCP_TTS_API_URL=${{ secrets.NCP_TTS_API_URL }}
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export OPENAI_API_MODEL=${{ secrets.OPENAI_API_MODEL }}
          export OPENAI_API_URL=${{ secrets.OPENAI_API_URL }}
          export STORAGE_DATABASE_CORE_DB_NAME=${{ secrets.STORAGE_DATABASE_CORE_DB_NAME }}
          export STORAGE_DATABASE_CORE_DB_PASSWORD=${{ secrets.STORAGE_DATABASE_CORE_DB_PASSWORD }}
          export STORAGE_DATABASE_CORE_DB_USERNAME=${{ secrets.STORAGE_DATABASE_CORE_DB_USERNAME }}
          export STORAGE_DATABASE_MONGO_DB_NAME=${{ secrets.STORAGE_DATABASE_MONGO_DB_NAME }}
          export STORAGE_DATABASE_MONGO_DB_PASSWORD=${{ secrets.STORAGE_DATABASE_MONGO_DB_PASSWORD }}
          export STORAGE_DATABASE_MONGO_DB_USER=${{ secrets.STORAGE_DATABASE_MONGO_DB_USER }}

          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_PASSWORD }}"
          cd /home/username/backend
          docker compose pull
          docker compose down
          docker compose up -d
