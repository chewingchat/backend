# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD Pipeline

on:
  push:
    branches:
      - dev  # 'dev' 브랜치에서만 워크플로우 실행 mm..

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: dev  # 'dev' 브랜치를 체크아웃
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew  # 실행 권한 설정

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-



      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build Docker Image
        run: docker build -t your-docker-image-name .

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: docker push your-docker-image-name

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH to NCP Server and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_SSH_KEY }}
          script: |
            docker pull your-docker-image-name
            docker stop spring-app || true
            docker rm spring-app || true
            docker run -d --name spring-app -p 8080:8080 your-docker-image-name
