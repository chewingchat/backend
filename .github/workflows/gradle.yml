# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 전체 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Show current directory
        run: pwd

      - name: List all files in directory
        run: ls -R

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew  # 실행 권한 추가
            
      - name: Build with Gradle
        env:
          SPRING_PROFILES_ACTIVE: live
        run: ./gradlew clean build

      - name: Build Docker Image
        env:
          SPRING_PROFILES_ACTIVE: live
        run: docker compose build

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          SPRING_PROFILES_ACTIVE: live
        run: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

      - name: Push Docker Image to Docker Hub
        env:
          SPRING_PROFILES_ACTIVE: live
        run: docker compose push

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Copy docker-compose.yml to Server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_SSH_KEY }}
          port: 8080
          source: "./docker-compose.yml"
          target: "~/"
      - name: SSH to NCP Server and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_SSH_KEY }}
          port: 8080
          script: |
            cd ~/  # 홈 디렉터리로 이동
            export $(cat .env | xargs)  # .env 파일의 환경 변수를 명확하게 로드
            docker compose --env-file .env pull
            docker compose --env-file .env down
            docker compose --env-file .env up -d


